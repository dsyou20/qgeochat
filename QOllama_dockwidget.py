# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QOllamaDockWidget
                                 A QGIS plugin
 QGIS Ollama
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-03-02
        git sha              : $Format:%H$
        copyright            : (C) 2025 by dsyou / elcomtech
        email                : dsyou20@gmail,com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal, QSettings, Qt, QUrl
from qgis.core import QgsProject, Qgis
from openai import OpenAI
from .rag_handler import RAGHandler
from qgis.PyQt.QtGui import QDesktopServices, QTextCharFormat, QColor, QTextCursor
from qgis.PyQt.QtWidgets import (QDockWidget, QWidget, QVBoxLayout, QHBoxLayout,
                                QPushButton, QLineEdit, QTextEdit, QLabel,
                                QTabWidget, QListWidget, QComboBox, QCheckBox,
                                QProgressBar, QMessageBox)

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'QOllama_dockwidget_base.ui'))


class QOllamaDockWidget(QDockWidget):

    closingPlugin = pyqtSignal()

    def __init__(self, iface):
        """초기화"""
        super(QOllamaDockWidget, self).__init__()
        self.iface = iface
        self.chat_history = []
        self.rag_handler = None
        self.api_key = None
        self.settings = QSettings()
        self.current_pdf_path = None  # PDF 파일 경로 저장
        self.analysis_file_path = None  # 분석 파일 경로 저장
        
        # 메시지 색상 정의 (초기화 순서 변경)
        self.message_colors = {
            '[시스템]': QColor(128, 128, 128),  # 회색
            '[사용자]': QColor(0, 100, 200),    # 파란색
            '[AI]': QColor(34, 139, 34)         # 초록색
        }
        
        # 기본 설정
        self.setWindowTitle("QOllama")
        self.setMinimumWidth(400)
        
        # 메인 위젯 및 레이아웃 설정
        self.main_widget = QWidget()
        self.main_layout = QVBoxLayout(self.main_widget)
        self.setWidget(self.main_widget)
        
        # 탭 위젯 생성
        self.tab_widget = QTabWidget()
        self.main_layout.addWidget(self.tab_widget)
        
        # 탭 생성
        self.setup_main_tab()
        self.setup_settings_tab()
        self.setup_connections()
        
        # 저장된 API 키 로드
        self.load_api_key()

    def setup_main_tab(self):
        """메인 탭 설정"""
        main_tab = QWidget()
        layout = QVBoxLayout(main_tab)
        
        # 레이어 관리 영역
        layer_group = QWidget()
        layer_layout = QHBoxLayout(layer_group)
        
        # 레이어 콤보박스
        self.layer_combo = QComboBox()
        self.reload_layers_button = QPushButton("레이어 새로고침")
        layer_layout.addWidget(self.layer_combo)
        layer_layout.addWidget(self.reload_layers_button)
        layout.addWidget(layer_group)
        
        # 레이어 처리 버튼들
        button_group = QWidget()
        button_layout = QHBoxLayout(button_group)
        self.process_button = QPushButton("레이어 처리")
        self.view_analysis_button = QPushButton("분석 내용 보기")
        self.view_analysis_button.setEnabled(False)
        button_layout.addWidget(self.process_button)
        button_layout.addWidget(self.view_analysis_button)
        layout.addWidget(button_group)
        
        # 프로그레스바 추가
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        layout.addWidget(self.progress_bar)
        
        # 분석 파일 경로 표시 레이블
        self.analysis_path_label = QLabel()
        self.analysis_path_label.setVisible(False)
        self.analysis_path_label.setWordWrap(True)
        self.analysis_path_label.setStyleSheet("color: blue; text-decoration: underline;")
        self.analysis_path_label.setCursor(Qt.PointingHandCursor)
        self.analysis_path_label.mousePressEvent = self.open_analysis_file
        layout.addWidget(self.analysis_path_label)
        
        # 채팅 표시 영역
        self.chat_display = QTextEdit()
        self.chat_display.setReadOnly(True)
        self.chat_display.setMinimumHeight(200)
        self.chat_display.setStyleSheet("""
        QTextEdit {
            background-color: white;
            color: black;
            font-family: Arial;
            font-size: 10pt;
        }
    """)
        layout.addWidget(self.chat_display)
        
        # 입력 영역
        input_group = QWidget()
        input_layout = QHBoxLayout(input_group)
        self.input_text = QLineEdit()
        self.input_text.setPlaceholderText("질문을 입력하세요...")
        self.send_button = QPushButton("전송")
        self.send_button.setEnabled(False)
        input_layout.addWidget(self.input_text)
        input_layout.addWidget(self.send_button)
        layout.addWidget(input_group)
        
        self.tab_widget.addTab(main_tab, "메인")
        self.update_layer_list()

    def setup_settings_tab(self):
        """설정 탭 설정"""
        settings_tab = QWidget()
        layout = QVBoxLayout(settings_tab)
        
        # OpenAI API 키 설정
        api_group = QWidget()
        api_layout = QVBoxLayout(api_group)
        
        api_label = QLabel("OpenAI API Key:")
        self.api_key_input = QLineEdit()
        self.api_key_input.setEchoMode(QLineEdit.Password)
        self.api_status_label = QLabel("API 키를 입력해주세요")
        
        # API 키 저장 체크박스 추가
        self.save_api_checkbox = QCheckBox("API 키 저장")
        self.save_api_checkbox.setChecked(self.settings.value("QOllama/save_api_key", False, type=bool))
        
        api_layout.addWidget(api_label)
        api_layout.addWidget(self.api_key_input)
        api_layout.addWidget(self.save_api_checkbox)
        api_layout.addWidget(self.api_status_label)
        
        layout.addWidget(api_group)
        layout.addStretch()
        
        self.tab_widget.addTab(settings_tab, "설정")

    def setup_connections(self):
        """시그널-슬롯 연결"""
        self.api_key_input.textChanged.connect(self.update_api_key)
        self.save_api_checkbox.stateChanged.connect(self.handle_save_api_setting)
        self.process_button.clicked.connect(self.process_layer)
        self.send_button.clicked.connect(self.send_message)
        self.input_text.returnPressed.connect(self.send_message)
        self.reload_layers_button.clicked.connect(self.update_layer_list)
        self.view_analysis_button.clicked.connect(self.view_analysis)

    def load_api_key(self):
        """저장된 API 키 로드"""
        if self.settings.value("QOllama/save_api_key", False, type=bool):
            saved_key = self.settings.value("QOllama/api_key", "")
            if saved_key:
                self.api_key_input.setText(saved_key)
                self.update_api_key()
                self.append_message("[시스템] 저장된 API 키를 불러왔습니다.")

    def handle_save_api_setting(self, state):
        """API 키 저장 설정 처리"""
        self.settings.setValue("QOllama/save_api_key", bool(state))
        if state:
            if self.api_key:
                self.settings.setValue("QOllama/api_key", self.api_key)
                self.append_message("[시스템] API 키가 저장되었습니다.")
        else:
            self.settings.remove("QOllama/api_key")
            self.append_message("[시스템] 저장된 API 키가 삭제되었습니다.")

    def update_layer_list(self):
        """레이어 목록 업데이트"""
        self.layer_combo.clear()
        layers = QgsProject.instance().mapLayers().values()
        for layer in layers:
            self.layer_combo.addItem(layer.name(), layer)

    def update_api_key(self):
        """API 키 업데이트 및 상태 표시"""
        api_key = self.api_key_input.text().strip()
        if api_key:
            try:
                self.api_key = api_key
                self.rag_handler = RAGHandler()
                self.process_button.setEnabled(True)
                self.api_status_label.setText("API 키가 설정되었습니다")
                self.api_status_label.setStyleSheet("color: green")
                
                # API 키 저장 처리
                if self.save_api_checkbox.isChecked():
                    self.settings.setValue("QOllama/api_key", api_key)
                    self.append_message("[시스템] API 키가 저장되었습니다.")
                
            except Exception as e:
                self.api_status_label.setText(f"API 키 설정 실패: {str(e)}")
                self.api_status_label.setStyleSheet("color: red")
                self.process_button.setEnabled(False)
                self.rag_handler = None
                self.api_key = None
        else:
            self.process_button.setEnabled(False)
            self.api_status_label.setText("API 키를 입력해주세요")
            self.api_status_label.setStyleSheet("color: red")
            self.rag_handler = None
            self.api_key = None

    def process_layer(self):
        """레이어 처리"""
        if not self.api_key or not self.rag_handler:
            self.append_message("[시스템] API 키를 먼저 설정해주세요.")
            self.tab_widget.setCurrentIndex(1)
            return

        try:
            layer = self.layer_combo.currentData()
            if not layer:
                self.append_message("[시스템] 레이어를 선택해주세요.")
                return

            self.progress_bar.setVisible(True)
            self.progress_bar.setValue(0)
            self.append_message("[시스템] 레이어 처리 중...")
            
            # 진행 상태 업데이트
            self.progress_bar.setValue(20)
            self.rag_handler.process_layer(layer)
            self.progress_bar.setValue(80)
            
            # 분석 파일 자동 생성
            self.save_analysis()
            self.progress_bar.setValue(100)
            
            self.append_message(f"[AI] '{layer.name()}' 레이어 처리가 완료되었습니다. 질문해 주세요!")
            self.send_button.setEnabled(True)
            self.view_analysis_button.setEnabled(True)
            
        except Exception as e:
            self.append_message(f"[시스템] 오류가 발생했습니다: {str(e)}")
            self.send_button.setEnabled(False)
            self.view_analysis_button.setEnabled(False)
        finally:
            self.progress_bar.setVisible(False)

    def save_analysis(self):
        """분석 내용을 파일로 저장"""
        try:
            if self.rag_handler and self.rag_handler.gdf is not None:
                # 기본 저장 경로 설정
                default_path = os.path.join(
                    os.path.expanduser("~"),
                    "QOllama_Analysis"
                )
                if not os.path.exists(default_path):
                    os.makedirs(default_path)
                
                # 파일명 생성 (현재 시간 포함)
                from datetime import datetime
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                layer_name = self.layer_combo.currentData().name()
                file_name = f"analysis_{layer_name}_{timestamp}.md"
                self.analysis_file_path = os.path.join(default_path, file_name)
                
                # 분석 내용 생성 및 저장
                analysis = self.rag_handler.analyze_geodataframe(self.rag_handler.gdf)
                with open(self.analysis_file_path, 'w', encoding='utf-8') as f:
                    f.write(f"# {layer_name} 레이어 분석 보고서\n")
                    f.write(f"생성 시간: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                    f.write(analysis)
                
                # 파일 경로 표시
                self.analysis_path_label.setText(f"분석 파일: {self.analysis_file_path}")
                self.analysis_path_label.setVisible(True)
                self.append_message(f"[시스템] 분석 파일이 저장되었습니다: {self.analysis_file_path}")
                
        except Exception as e:
            self.append_message(f"[시스템] 분석 파일 저장 중 오류 발생: {str(e)}")

    def view_analysis(self):
        """분석 내용 보기"""
        if not self.analysis_file_path or not os.path.exists(self.analysis_file_path):
            self.save_analysis()
        
        if self.analysis_file_path and os.path.exists(self.analysis_file_path):
            QDesktopServices.openUrl(QUrl.fromLocalFile(self.analysis_file_path))
        else:
            self.append_message("[시스템] 분석 파일을 찾을 수 없습니다.")

    def open_analysis_file(self, event):
        """분석 파일 열기 (레이블 클릭 이벤트)"""
        if self.analysis_file_path and os.path.exists(self.analysis_file_path):
            QDesktopServices.openUrl(QUrl.fromLocalFile(self.analysis_file_path))

    def send_message(self):
        """메시지 전송 처리"""
        try:
            question = self.input_text.text().strip()
            if not question:
                return
            
            # 사용자 질문 표시 (파란색)
            self.chat_display.append(f'<div style="color: blue;"><b>[사용자]</b> {question}</div>')
            self.input_text.clear()
            
            # 응답 생성
            answer = self.rag_handler.query(question)
            
            # AI 응답 표시 (초록색) - 줄바꿈 보존
            formatted_answer = answer.replace('\n', '<br>')  # 줄바꿈을 HTML <br> 태그로 변환
            self.chat_display.append(f'<div style="color: green;"><b>[AI]</b> {formatted_answer}</div>')
            self.chat_display.append("")  # 빈 줄 추가
            
            # 스크롤을 가장 아래로 이동
            self.chat_display.verticalScrollBar().setValue(
                self.chat_display.verticalScrollBar().maximum()
            )
            
        except Exception as e:
            QMessageBox.warning(self, "오류", f"메시지 처리 중 오류가 발생했습니다: {str(e)}")

    def append_message(self, message):
        """채팅 메시지 추가 (색상 적용)"""
        self.chat_history.append(message)
        
        # 이전 텍스트 지우기
        self.chat_display.clear()
        
        # 메시지 색상 적용하여 추가
        cursor = self.chat_display.textCursor()
        for msg in self.chat_history:
            format = QTextCharFormat()
            
            # 메시지 타입에 따른 색상 설정
            for prefix, color in self.message_colors.items():
                if msg.startswith(prefix):
                    format.setForeground(color)
                    break
            
            cursor.insertText(msg + '\n', format)
        
        # 스크롤을 최하단으로 이동
        self.chat_display.verticalScrollBar().setValue(
            self.chat_display.verticalScrollBar().maximum()
        )

    def closeEvent(self, event):
        """플러그인 종료 시 정리"""
        # API 키 저장 설정이 해제되어 있으면 저장된 키 삭제
        if not self.save_api_checkbox.isChecked():
            self.settings.remove("QOllama/api_key")
        
        self.closingPlugin.emit()
        event.accept()

    def setup_chat_ui(self):
        """채팅 UI 설정"""
        # 채팅 표시 영역 설정
        self.chat_display.setStyleSheet("""
            QTextEdit {
                background-color: white;
                color: black;
                font-family: Arial;
                font-size: 10pt;
                line-height: 1.5;
            }
        """)
        self.chat_display.setAcceptRichText(True)  # HTML 형식 허용
        self.chat_display.setReadOnly(True)  # 읽기 전용

    def clear_chat_history(self):
        """대화 기록 초기화"""
        try:
            self.rag_handler.clear_chat_history()
            self.chat_display.clear()
            self.chat_display.append("대화 기록이 초기화되었습니다.")
        except Exception as e:
            QMessageBox.warning(self, "오류", f"대화 기록 초기화 중 오류가 발생했습니다: {str(e)}")
